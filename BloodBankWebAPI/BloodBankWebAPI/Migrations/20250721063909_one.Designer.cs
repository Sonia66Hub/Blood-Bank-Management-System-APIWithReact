// <auto-generated />
using System;
using BloodBankWebAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BloodBankWebAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250721063909_one")]
    partial class one
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BloodBankWebAPI.Models.BloodGroup", b =>
                {
                    b.Property<int>("BloodGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BloodGroupId"));

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("BloodGroupId");

                    b.ToTable("BloodGroups");

                    b.HasData(
                        new
                        {
                            BloodGroupId = 1,
                            GroupName = "A+"
                        },
                        new
                        {
                            BloodGroupId = 2,
                            GroupName = "A-"
                        },
                        new
                        {
                            BloodGroupId = 3,
                            GroupName = "B+"
                        },
                        new
                        {
                            BloodGroupId = 4,
                            GroupName = "B-"
                        },
                        new
                        {
                            BloodGroupId = 5,
                            GroupName = "O+"
                        },
                        new
                        {
                            BloodGroupId = 6,
                            GroupName = "O-"
                        },
                        new
                        {
                            BloodGroupId = 7,
                            GroupName = "AB+"
                        },
                        new
                        {
                            BloodGroupId = 8,
                            GroupName = "AB-"
                        });
                });

            modelBuilder.Entity("BloodBankWebAPI.Models.BloodInventory", b =>
                {
                    b.Property<int>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InventoryId"));

                    b.Property<int>("BloodGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("UnitsAvailable")
                        .HasColumnType("int");

                    b.HasKey("InventoryId");

                    b.HasIndex("BloodGroupId")
                        .IsUnique();

                    b.ToTable("BloodInventories");

                    b.HasData(
                        new
                        {
                            InventoryId = 1,
                            BloodGroupId = 1,
                            LastUpdated = new DateTime(2025, 7, 21, 12, 39, 7, 924, DateTimeKind.Local).AddTicks(3506),
                            UnitsAvailable = 10
                        },
                        new
                        {
                            InventoryId = 2,
                            BloodGroupId = 2,
                            LastUpdated = new DateTime(2025, 7, 21, 12, 39, 7, 924, DateTimeKind.Local).AddTicks(3517),
                            UnitsAvailable = 10
                        },
                        new
                        {
                            InventoryId = 3,
                            BloodGroupId = 3,
                            LastUpdated = new DateTime(2025, 7, 21, 12, 39, 7, 924, DateTimeKind.Local).AddTicks(3518),
                            UnitsAvailable = 10
                        },
                        new
                        {
                            InventoryId = 4,
                            BloodGroupId = 4,
                            LastUpdated = new DateTime(2025, 7, 21, 12, 39, 7, 924, DateTimeKind.Local).AddTicks(3519),
                            UnitsAvailable = 10
                        },
                        new
                        {
                            InventoryId = 5,
                            BloodGroupId = 5,
                            LastUpdated = new DateTime(2025, 7, 21, 12, 39, 7, 924, DateTimeKind.Local).AddTicks(3520),
                            UnitsAvailable = 10
                        },
                        new
                        {
                            InventoryId = 6,
                            BloodGroupId = 6,
                            LastUpdated = new DateTime(2025, 7, 21, 12, 39, 7, 924, DateTimeKind.Local).AddTicks(3521),
                            UnitsAvailable = 10
                        },
                        new
                        {
                            InventoryId = 7,
                            BloodGroupId = 7,
                            LastUpdated = new DateTime(2025, 7, 21, 12, 39, 7, 924, DateTimeKind.Local).AddTicks(3522),
                            UnitsAvailable = 10
                        },
                        new
                        {
                            InventoryId = 8,
                            BloodGroupId = 8,
                            LastUpdated = new DateTime(2025, 7, 21, 12, 39, 7, 924, DateTimeKind.Local).AddTicks(3523),
                            UnitsAvailable = 10
                        });
                });

            modelBuilder.Entity("BloodBankWebAPI.Models.DonationHistory", b =>
                {
                    b.Property<int>("DonationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DonationId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DonationDate")
                        .HasColumnType("date");

                    b.Property<string>("DonationLocation")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("DonorId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("DonationId");

                    b.HasIndex("DonorId");

                    b.ToTable("DonationHistories");
                });

            modelBuilder.Entity("BloodBankWebAPI.Models.Donor", b =>
                {
                    b.Property<int>("DonorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DonorId"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("BloodGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("DonorName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("LastDonationDate")
                        .HasColumnType("date");

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("DonorId");

                    b.HasIndex("BloodGroupId");

                    b.ToTable("Donors");

                    b.HasData(
                        new
                        {
                            DonorId = 1,
                            Address = "Dhaka",
                            BloodGroupId = 1,
                            CreatedAt = new DateTime(2025, 7, 21, 12, 39, 7, 924, DateTimeKind.Local).AddTicks(3542),
                            DonorName = "John Doe",
                            Email = "john@example.com",
                            Gender = "Male",
                            MobileNo = "01700000000"
                        });
                });

            modelBuilder.Entity("BloodBankWebAPI.Models.Receiver", b =>
                {
                    b.Property<int>("ReceiverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReceiverId"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("BloodGroupId")
                        .HasColumnType("int");

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ReceiverId");

                    b.HasIndex("BloodGroupId");

                    b.ToTable("Receivers");
                });

            modelBuilder.Entity("BloodBankWebAPI.Models.BloodInventory", b =>
                {
                    b.HasOne("BloodBankWebAPI.Models.BloodGroup", "BloodGroup")
                        .WithOne("BloodInventory")
                        .HasForeignKey("BloodBankWebAPI.Models.BloodInventory", "BloodGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodGroup");
                });

            modelBuilder.Entity("BloodBankWebAPI.Models.DonationHistory", b =>
                {
                    b.HasOne("BloodBankWebAPI.Models.Donor", "Donor")
                        .WithMany("DonationHistories")
                        .HasForeignKey("DonorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Donor");
                });

            modelBuilder.Entity("BloodBankWebAPI.Models.Donor", b =>
                {
                    b.HasOne("BloodBankWebAPI.Models.BloodGroup", "BloodGroup")
                        .WithMany("Donors")
                        .HasForeignKey("BloodGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodGroup");
                });

            modelBuilder.Entity("BloodBankWebAPI.Models.Receiver", b =>
                {
                    b.HasOne("BloodBankWebAPI.Models.BloodGroup", "BloodGroup")
                        .WithMany("Receivers")
                        .HasForeignKey("BloodGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodGroup");
                });

            modelBuilder.Entity("BloodBankWebAPI.Models.BloodGroup", b =>
                {
                    b.Navigation("BloodInventory")
                        .IsRequired();

                    b.Navigation("Donors");

                    b.Navigation("Receivers");
                });

            modelBuilder.Entity("BloodBankWebAPI.Models.Donor", b =>
                {
                    b.Navigation("DonationHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
